/*
 * fis
 * http://web.baidu.com/
 */

'use strict';

var fis = require('../fis-kernel.js');

function replaceDefine(value, def){
    def = def || fis.config.get('project', {});
    return value.replace(/\$\{([^\}]+)\}/g, function(all, $1){
        if(typeof def[$1] === 'string'){
            return fis.util.escapeReg(def[$1]);
        } else {
            fis.log.error('invalid property [project.' + $1 + '], expecting string.');
        }
        return all;
    });
}

function replaceMatches(value, matches){
    return value.replace(/\$(\d+)/g, function(all, $1){
        return matches[$1] || all;
    });
}

function roadmap(subpath, path, obj){
    var def = fis.config.get('project', {}),
        map = fis.config.get('roadmap.' + path, []);
    for(var i = 0, len = map.length; i < len; i++){
        var opt = map[i], reg = opt.reg;
        if(reg){
            reg = new RegExp(replaceDefine(reg, def), 'i');
            var matches = subpath.match(reg);
            if(matches){
                obj = obj || {};
                for(var key in opt){
                    if(key !== 'reg' && opt.hasOwnProperty(key)){
                        var value = opt[key];
                        if(typeof value === 'string'){
                            value = replaceMatches(
                                replaceDefine(value, def),
                                matches
                            );
                        }
                        obj[key] = value;
                    }
                }
                return obj;
            }
        } else {
            fis.log.error('[roadmap.' + path + '] missing property [reg].');
        }
    }
    return false;
}

var uri = module.exports = function(path, dirname){
    var info = fis.util.stringQuote(path),
        qInfo = fis.util.query(info.rest),
        root = fis.path.getProjectPath();
    info.query = qInfo.query;
    info.rest = qInfo.rest;
    if(info.rest){
        path = info.rest;
        switch(path[0]){
            case '.': //relative
                if(dirname){
                    info.file = fis.file(dirname, path);
                } else {
                    fis.log.error('invalid dirname.');
                }
                break;
            case '/': //url
                var opt = roadmap(path, 'url');
                if(opt){
                    if(opt.path && root){
                        info.file = fis.file(root, opt.path);
                    } if(!root){
                        fis.log.error('invalid root path.');
                    } else {
                        fis.log.error('missing [path] property of roadmap.url item.');
                    }
                }
                break;
            default :
                //protocol : /^[a-zA-Z]+:\/\//.test(path)
                //todo enable to locate lib files
        }
    }
    return info;
};

uri.getId = function(path, dirname){
    var info = uri(path, dirname);
    if(info.file){
        info.id = info.file.getId();
    } else {
        info.id = info.rest;
    }
    return info;
};

uri.getUrl = function(path, dirname, hash, domain){
    var info = uri(path, dirname);
    if(info.file){
        info.url = info.file.getUrl(hash, domain);
    } else {
        info.url = info.rest;
    }
    return info;
};

uri.replaceDefine = replaceDefine;
uri.replaceMatches = replaceMatches;
uri.roadmap = roadmap;