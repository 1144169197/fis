/*
 * fis
 * http://web.baidu.com/
 */

'use strict';
    
var CONF_FILE = 'fis-conf.json';

exports.name = 'release';
exports.desc = 'build and deploy your project';
exports.register = function(commander, fis){
    
    function getProjectRoot(){
        var cwd = fis.util.realpath(process.cwd()),
            pos = cwd.length;
        do {
            cwd = cwd.substring(0, pos);
            if(fis.util.exists(cwd + '/' + CONF_FILE)){
                return cwd;
            } else {
                pos = cwd.lastIndexOf('/');
            }
        } while(pos > 0);
        return false;
    }
    
    commander
        .option('-d, --dest <names>', 'release output destination')
        .option('-w, --watch', 'monitor the changes of project')
        .option('-c, --clean', 'clean cache before releasing')
        .option('-m, --md5 <level>',  'md5 release option', parseInt, 1)
        .option('-H, --no-hint',      'without hint', Boolean, true)
        .option('-O, --no-optimize',  'without optimize', Boolean, true)
        .option('-P, --no-package',   'without package', Boolean, true)
        .action(function(options){
            var root = getProjectRoot();
            if(root){
                fis.path.setProjectRoot(root);
                var conf = fis.path.getProjectPath(CONF_FILE),
                    settings = fis.util.readJSON(conf);
                fis.config.merge(settings);
                console.log(fis.config.get());
            } else {
                fis.log.error('unable to get fis conf file[' + CONF_FILE + ']');
            }
        });
};