/*
 * fis
 * http://web.baidu.com/
 */

'use strict';
    
var CONF_FILE = 'fis-conf.json';

exports.name = 'release';
exports.desc = 'build and deploy your project';
exports.register = function(commander, fis){
    
    function getProjectRoot(){
        var cwd = fis.util.realpath(process.cwd()),
            pos = cwd.length;
        do {
            cwd = cwd.substring(0, pos);
            if(fis.util.exists(cwd + '/' + CONF_FILE)){
                return cwd;
            } else {
                pos = cwd.lastIndexOf('/');
            }
        } while(pos > 0);
        return false;
    }
    
    function checkDependencies(callback){
        fis.log.debug('checking dependencies');
        var deps = fis.config.get('deps', {}),
            tar = require('tar'),
            fs = require('fs'),
            count = 0,
            remote = fis.config.get(
                'system.repos',
                'http://web.baidu.com/fis_repos'
            ).replace(/\/$/, '');
        fis.util.map(deps, function(name, version){
            var dir = fis.path.getLibPath(name, version, name);
            var flag = dir + '/.inited';
            if(!fis.util.exists(flag)){
                process.stdout.write('download module [' + name + '@' + version + '] ... ');
                count++;
                var url = remote + '/' + name + '/' + version + '.tar';
                fis.util.download(url, function(err, file){
                    if(err) {
                        process.stdout.write('fail\n');
                        fis.log.error(
                            'unable to download modules [' +
                                name + '@' + version + '] from [' +
                                url + '], error[' + err + ']'
                        );
                    } else {
                        fs
                            .createReadStream(file)
                            .pipe(tar.Extract({
                                path : dir
                            }))
                            .on('error', function(err){
                                process.stdout.write('fail\n');
                                fis.log.error(err);
                            })
                            .on('end', function(){
                                var str = [
                                    'name : ' + name + '@' + version,
                                    'from : ' + url,
                                    'time : ' + (new Date)
                                ].join('\n');
                                fis.util.write(flag, str);
                                process.stdout.write('ok\n');
                                if(--count == 0){
                                    callback();
                                }
                            });
                    }
                });
            }
        });
        if(count == 0){
            callback();
        }
    }
    
    commander
        .option('-d, --dest <names>', 'release output destination')
        .option('-w, --watch', 'monitor the changes of project')
        .option('-c, --clean', 'clean cache before releasing')
        .option('-m, --md5 <level>',  'md5 release option', parseInt, 1)
        .option('-H, --no-hint',      'without hint', Boolean, true)
        .option('-O, --no-optimize',  'without optimize', Boolean, true)
        .option('-P, --no-package',   'without package', Boolean, true)
        .action(function(options){
            var root = getProjectRoot();
            if(root){
                fis.path.setProjectRoot(root);
                var conf = fis.path.getProjectPath(CONF_FILE),
                    settings = fis.util.readJSON(conf);
                fis.config.merge(settings);
                checkDependencies(function(){
                    
                });
            } else {
                fis.log.error('unable to get fis conf file[' + CONF_FILE + ']');
            }
        });
};