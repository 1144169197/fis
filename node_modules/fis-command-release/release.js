/*
 * fis
 * http://web.baidu.com/
 */

'use strict';

exports.name = 'release';
exports.desc = 'build and deploy your project';
exports.register = function(commander, fis){
    
    function watch(opt){
        var root = fis.project.getProjectPath();
        var isWin = fis.util.isWin();
        var ignored = [];
        [ 'output', fis.project.conf.substring(root.length + 1) ].forEach(function(pattern){
            pattern = isWin ? pattern.replace(/\//g, '\\') : pattern;
            ignored.push('^' + fis.util.escapeReg(pattern) + '\b');
        });
        if(isWin){
            ignored.push(fis.util.escapeReg('\\.'));
        } else {
            ignored.push(fis.util.escapeReg('/.'));
        }
        ignored = new RegExp(ignored.join('|'), 'i');
        var timer = -1;
        var safePathReg = /^[:\\\/ _\-.\w]+$/i;
        function listener(path){
            if(safePathReg.test(path)){
                clearTimeout(timer);
                timer = setTimeout(function(){
                    release(opt);
                }, 500);
            }
        }
        require('chokidar')
            .watch(root, {
                ignored : /\\output\b/i,
                persistent: true
            })
            .on('add', listener)
            .on('change', listener)
            .on('unlink', function(path){
                fis.log.notice('delete file [' + path + ']');
            })
            .on('error', function(err){
                fis.log.error(err);
            });
    }
    
    
    var lastModified = {};
    var collection = {};
    var deploy = require('./lib/deploy.js');
    
    function release(opt){
        //write a white space.
        process.stdout.write(' ');
        //compile hooks
        var flag, cost, index = 0;
        opt.beforeEach = function(){
            flag = '.';
            cost = (new Date).getTime();
        };
        opt.afterEach = function(file){
            //cal compile time
            cost = (new Date).getTime() - cost;
            if(cost > 200){
                flag = flag.bold.yellow;
            } else if(cost < 100){
                flag = flag.grey;
            }
            if(index > 0 && index % 50 === 0){
                process.stdout.write('\n ');
            }
            process.stdout.write(flag);
            //collect file to deploy
            var mtime = file.getMtime().getTime();
            if(lastModified[file.subpath] !== mtime){
                collection[file.subpath] = file;
                lastModified[file.subpath] = mtime;
            }
            index++;
        };
        
        //release
        fis.release(opt, function(ret){
            process.stdout.write('\n');
            fis.util.map(ret.pkg, collection, true);
            deploy(opt.dest, opt.md5, collection, fis);
            collection = {};
        });
    }
    
    commander
        .option('-d, --dest <names>', 'release output destination', String, 'output')
        .option('-w, --watch', 'monitor the changes of project')
        .option('-c, --clean', 'clean cache before releasing')
        .option('-t, --type <ext>', 'resouce map type', String, 'php')
        .option('-m, --md5 <level>', 'md5 release option', parseInt, 1)
        .option('-D, --domain', 'add domain', Boolean, false)
        .option('-H, --no-hint', 'without hint', Boolean, true)
        .option('-O, --no-optimize', 'without optimize', Boolean, true)
        .option('-P, --no-package', 'without package', Boolean, true)
        .option('--debug', 'debug mode', Boolean, false)
        .action(function(options){
            var cwd = fis.util.realpath(process.cwd()),
                filename = fis.config.get('system.conf', fis.project.DEFAULT_CONF_FILE),
                pos = cwd.length, conf;
            do {
                cwd  = cwd.substring(0, pos);
                conf = cwd + '/' + filename;
                if(fis.util.exists(conf)){
                    //init project
                    fis.project.init(cwd, conf, function(){
                        //configure log
                        fis.log.level = options.debug ? fis.log.L_ALL : fis.log.level;
                        fis.log.throw = true;
                        
                        //compile setup
                        fis.compile.setup({
                            debug    : options.debug,
                            optimize : options.optimize,
                            hint     : options.hint,
                            hash     : options.md5 > 0,
                            domain   : options.domain
                        });                        
                        
                        if(options.watch){
                            watch(options);
                        } else {
                            release(options);
                        }
                    });
                    return;
                }
            } while(pos > 0);
            fis.log.error('unable to find fis-conf file [' + filename + ']');
        });
};