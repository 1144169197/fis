/*
 * fis
 * http://web.baidu.com/
 */

'use strict';

exports.register = function(opt, fis){
    
    var safePathReg = /^[:\\\/ _\-.\w]+$/i;
    var timer = -1;
    var lastModified = {};
    var flag = '.';
    var deploy = require('./deploy.js');
    
    //prepare
    var root = fis.project.getProjectPath();
    var isWin = fis.util.isWin();
    var ignored = [];
    //exclude output、fis-conf.json
    [ root + '/output/', fis.project.conf].forEach(function(pattern){
        pattern = isWin ? pattern.replace(/\//g, '\\') : pattern;
        ignored.push('^' + fis.util.escapeReg(pattern));
    });
    if(isWin){
        ignored.push(fis.util.escapeReg('\\.'));
    } else {
        ignored.push(fis.util.escapeReg('/.'));
    }
    ignored = new RegExp(ignored.join('|'), 'i');
    
    //listener
    function listener(path){
        if(safePathReg.test(path)){
            clearTimeout(timer);
            timer = setTimeout(function(){
                process.stdout.write(' ');
                var cost, flag, index = 0;
                fis.release({
                    beforeEach : function(){
                        flag = '.';
                        cost = (new Date).getTime();
                    },
                    afterEach : function(file){
                        cost = (new Date).getTime() - cost;
                        if(cost > 200){
                            flag = flag.bold.yellow;
                        } else if(cost < 100){
                            flag = flag.grey;
                        }
                        if(index > 0 && index % 50 === 0){
                            process.stdout.write('\n ');
                        }
                        process.stdout.write(flag);
                        index++;
                    }
                }, function(ret){
                    process.stdout.write('\n');
                    deploy(opt.dest, ret, fis);
                });
            }, 500);
        } else {
            fis.log.warning('unsafe filename [' + path + '], refused to release.');
        }
    }
    
    //watch
    require('chokidar')
        .watch(root, {
            ignored : ignored,
            persistent: true
        })
        .on('add', listener)
        .on('change', listener)
        .on('unlink', function(path){
            fis.log.notice('delete file [' + path + ']');
        })
        .on('error', function(err){
            fis.log.error(err);
        });
};