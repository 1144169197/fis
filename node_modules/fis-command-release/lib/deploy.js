/*
 * fis
 * http://web.baidu.com/
 */

'use strict';

function deploy(dest, file, fis){
    if(dest.receiver){
        fis.util.upload(
            //url, request options, post data, file
            dest.receiver, null, { to : dest.to + file.release }, file,
            function(err, res){
                if(err || res != '0'){
                    fis.log.error('upload file [' + file.subpath + '] to [' + dest.to +
                        '] by receiver [' + dest.receiver + '] error [' + (err || res) + ']');
                } else {
                    console.log(file.realpath);
                }
            }
        );
    } else {
        file.deliver(dest.root + dest.to, dest.md5);
    }
}

function normilize(str){
    return '/' + str.replace(/^\//, '');
}

module.exports = function(dest, md5, collection, fis){
    var settings = fis.config.get('deploy', {});
    var root = fis.project.getProjectPath();
    var dests = [];
    dest.split(/,/g).forEach(function(d){
        var opt = { md5 : md5 };
        if(settings[d]){
            var setting = settings[d];
            if(setting.to){
                opt.root = root;
                opt.from = normilize(setting.from || '');
                opt.to = normilize(opt.to);
            } else {
                fis.log.error('invalid deploy config [deploy.' + d + '.to]');
            }
        } else if(/^output\b/.test(d)){ //local
            opt.root = root;
            opt.from = '/';
            opt.to = normilize(d);
        } else if(d === 'preview'){
            opt.root = fis.project.getTempPath('www');
            opt.from = '/';
            opt.to   = '/';
        } else {
            fis.log.error('invalid deploy destination options [' + d + ']');
        }
        dests.push(opt);
    });
    fis.util.map(collection, function(subpath, file){
        dests.forEach(function(d){
            if(file.release.indexOf(d.from) === 0){
                deploy(d, file, fis);
            }
        });
    });
};