/*
 * fis
 * http://web.baidu.com/
 */

'use strict';

exports.name = 'server';
exports.usage = '<start|stop|restart> [options]';
exports.desc = 'launch a php-cgi server';
exports.register = function(commander, fis){
    
    function getConf(){
        return fis.project.getTempPath('server/conf.json');
    }
    
    function stop(callback){
        var tmp = fis.util(__dirname, 'pid');
        if(fis.util.exists(tmp)){
            var pid = fis.util.fs.readFileSync(tmp, 'utf8').trim().split(/\s*,\s*/);
            var list, msg = '';
            var isWin = fis.util.isWin();
            if(isWin){
                list = require('child_process').spawn('tasklist');
            } else {
                list = require('child_process').spawn('ps', ['a']);
            }
            list.stdout.on('data', function(chunk){
                msg += chunk.toString('utf8').toLowerCase();
            });
            list.on('exit', function(){
                var reg = /\b(node|java)\b/;
                var indexs = {
                    'node' : 0,
                    'java' : 1
                };
                msg.split(/[\r\n]+/).forEach(function(item){
                    var match = item.match(reg);
                    if(match){
                        item = item.split(/\s+/);
                        var id = item[isWin ? 1 : 0];
                        if(id == pid[indexs[match[1]]]){
                            process.kill(id);
                        }
                    }
                });
                if(callback){
                    callback();
                }
            });
        }
    }
    
    function getVersion(str){
        var version = false;
        var reg = /\b\d+(\.\d+){2}/;
        var match = str.match(reg);
        if(match){
            version = match[0];
        }
        return version;
    }
    
    function start(opt){
        var tmp = getConf();
        if(opt){
            fis.util.write(tmp, JSON.stringify(opt));
        } else {
            if(fis.util.exists(tmp)){
                opt = fis.util.readJSON(tmp);
            } else {
                opt = {};
            }
        }
        
        var spawn = require('child_process').spawn;
        var now = (new Date).getTime();
        
        //check java
        process.stdout.write('check java version : ');
        var java = spawn('java', ['-version']);
        var javaVersion = false;
        java.stderr.on('data', function(data){
            if(!javaVersion){
                javaVersion = getVersion(data.toString('utf8'));
                if(javaVersion){
                    process.stdout.write(javaVersion + '\n');
                }
            }
        });
        java.on('error', function(err){
            fis.log.error(err);
        });
        java.on('exit', function(){
            if(javaVersion){
                //check php-cgi
                process.stdout.write('check php-cgi version : ');
                var php = spawn('php-cgi', ['-v']);
                var phpVersion = false;
                php.stdout.on('data', function(data){
                    if(!phpVersion){
                        phpVersion = getVersion(data.toString('utf8'));
                        if(phpVersion){
                            process.stdout.write(phpVersion + '\n');
                        }
                    }
                });
                php.on('error', function(err){
                    fis.log.error(err);
                });
                php.on('exit', function(){
                    if(phpVersion){
                        process.stdout.write('starting fis-server on port : ');
                        var cmd = [
                            process.execPath.replace(/\s+/g, '" "'),
                            '"' + fis.util(__dirname, 'child.js') + '"',
                            '--port', opt.port,
                            '--script', opt.script,
                            '--pool_size', opt.pool_size,
                            '--max_requests', opt.max_requests
                        ].join(' ');
                        fis.util.nohup(cmd, { cwd : __dirname });
                        setTimeout(function(){
                            process.stdout.write(opt.port + '\n');
                        }, 2000);
                    } else {
                        fis.log.error('unsupported php-cgi environment');
                    }
                });
            } else {
                fis.log.error('unsupported java environment');
            }
        });
    }
    
    commander
        .option('-p, --port <int>', 'server listen port', parseInt, 8080)
        .option('-s, --script <name>', 'input php file', String, 'www/index.php')
        .option('--pool_size <int>', 'the number of php-cgi processes', parseInt, 10)
        .option('--max_requests <int>', 'the max number of requests', parseInt, 1000)
        .action(function(cmd, options){
            switch (cmd){
                case 'start':
                    stop(function(){
                        start({
                            port : options['port'],
                            script : options['script'],
                            pool_size : options['pool_size'],
                            max_requests : options['max_requests']
                        });
                    });
                    break;
                case 'stop':
                    stop();
                    break;
                case 'restart':
                    stop(start);
                    break;
                default :
                    commander.help();
            }
        });
};